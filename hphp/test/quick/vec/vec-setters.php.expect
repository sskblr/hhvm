Testing append....
vec(0) {
}
vec(9) {
  int(0)
  string(1) "a"
  float(1.23)
  bool(false)
  object(stdClass)#1 (0) {
  }
  array(3) {
    [0]=>
    int(300)
    [1]=>
    int(200)
    [2]=>
    int(100)
  }
  vec(0) {
  }
  vec(3) {
    int(1)
    int(2)
    int(3)
  }
  dict(3) {
    ["a"]=>
    int(1)
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
Testing set....
Set to 0 key value failed: "Out of bounds array access: invalid index 0"
Set to 3 key value failed: "Out of bounds array access: invalid index 3"
Set to 999999999 key value failed: "Out of bounds array access: invalid index 999999999"
Set to -1 key value failed: "Out of bounds array access: invalid index -1"
Set to "key1" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to "0" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to "3" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to "" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to bool key value failed: "Invalid vec key: expected a key of type int, bool given"
Set to null key value failed: "Invalid vec key: expected a key of type int, null given"
Set to double key value failed: "Invalid vec key: expected a key of type int, double given"
Set to object key value failed: "Invalid vec key: expected a key of type int, stdClass given"
Set to array key value failed: "Invalid vec key: expected a key of type int, array given"
Set to vec key value failed: "Invalid vec key: expected a key of type int, vec given"
Set to dict key value failed: "Invalid vec key: expected a key of type int, dict given"
vec(0) {
}
vec(0) {
}
Test set-op....
Set-Op to " + 0 key value" failed: "Out of bounds array access: invalid index 0"
Set-Op to " + 3 key value" failed: "Out of bounds array access: invalid index 3"
Set-Op to " + 999999999 key value" failed: "Out of bounds array access: invalid index 999999999"
Set-Op to " + -1 key value" failed: "Out of bounds array access: invalid index -1"
Set-Op to " + "key1" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + "0" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + "3" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + "" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + bool key value" failed: "Invalid vec key: expected a key of type int, bool given"
Set-Op to " + null key value" failed: "Invalid vec key: expected a key of type int, null given"
Set-Op to " + double key value" failed: "Invalid vec key: expected a key of type int, double given"
Set-Op to " + object key value" failed: "Invalid vec key: expected a key of type int, stdClass given"
Set-Op to " + array key value" failed: "Invalid vec key: expected a key of type int, array given"
Set-Op to " + vec key value" failed: "Invalid vec key: expected a key of type int, vec given"
Set-Op to " + dict key value" failed: "Invalid vec key: expected a key of type int, dict given"
vec(0) {
}
vec(0) {
}
Test unset....
Unset succeeded
vec(0) {
}
vec(0) {
}
Unset succeeded
vec(0) {
}
vec(0) {
}
Unset succeeded
Unset succeeded
Unset succeeded
Unset succeeded
Unset succeeded
Unset succeeded
Unset failed: "Invalid vec key: expected a key of type int, bool given"
Unset failed: "Invalid vec key: expected a key of type int, null given"
Unset failed: "Invalid vec key: expected a key of type int, double given"
Unset failed: "Invalid vec key: expected a key of type int, stdClass given"
Unset failed: "Invalid vec key: expected a key of type int, array given"
Unset failed: "Invalid vec key: expected a key of type int, vec given"
Unset failed: "Invalid vec key: expected a key of type int, dict given"
vec(0) {
}
vec(0) {
}
Testing append....
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
vec(13) {
  int(1)
  int(2)
  int(3)
  int(4)
  int(0)
  string(1) "a"
  float(1.23)
  bool(false)
  object(stdClass)#1 (0) {
  }
  array(3) {
    [0]=>
    int(300)
    [1]=>
    int(200)
    [2]=>
    int(100)
  }
  vec(0) {
  }
  vec(3) {
    int(1)
    int(2)
    int(3)
  }
  dict(3) {
    ["a"]=>
    int(1)
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
Testing set....
Set to 0 key value succeeded
Set to 3 key value succeeded
Set to 999999999 key value failed: "Out of bounds array access: invalid index 999999999"
Set to -1 key value failed: "Out of bounds array access: invalid index -1"
Set to "key1" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to "0" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to "3" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to "" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to bool key value failed: "Invalid vec key: expected a key of type int, bool given"
Set to null key value failed: "Invalid vec key: expected a key of type int, null given"
Set to double key value failed: "Invalid vec key: expected a key of type int, double given"
Set to object key value failed: "Invalid vec key: expected a key of type int, stdClass given"
Set to array key value failed: "Invalid vec key: expected a key of type int, array given"
Set to vec key value failed: "Invalid vec key: expected a key of type int, vec given"
Set to dict key value failed: "Invalid vec key: expected a key of type int, dict given"
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
vec(4) {
  string(11) "0 key value"
  int(2)
  int(3)
  string(11) "3 key value"
}
Test set-op....
Set-Op to " + 0 key value" succeeded
Set-Op to " + 3 key value" succeeded
Set-Op to " + 999999999 key value" failed: "Out of bounds array access: invalid index 999999999"
Set-Op to " + -1 key value" failed: "Out of bounds array access: invalid index -1"
Set-Op to " + "key1" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + "0" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + "3" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + "" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + bool key value" failed: "Invalid vec key: expected a key of type int, bool given"
Set-Op to " + null key value" failed: "Invalid vec key: expected a key of type int, null given"
Set-Op to " + double key value" failed: "Invalid vec key: expected a key of type int, double given"
Set-Op to " + object key value" failed: "Invalid vec key: expected a key of type int, stdClass given"
Set-Op to " + array key value" failed: "Invalid vec key: expected a key of type int, array given"
Set-Op to " + vec key value" failed: "Invalid vec key: expected a key of type int, vec given"
Set-Op to " + dict key value" failed: "Invalid vec key: expected a key of type int, dict given"
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
vec(4) {
  string(15) "1 + 0 key value"
  int(2)
  int(3)
  string(15) "4 + 3 key value"
}
Test unset....
Unset succeeded
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
dict(3) {
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
}
Unset succeeded
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
dict(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
Unset succeeded
Unset succeeded
Unset succeeded
Unset succeeded
Unset succeeded
Unset succeeded
Unset failed: "Invalid vec key: expected a key of type int, bool given"
Unset failed: "Invalid vec key: expected a key of type int, null given"
Unset failed: "Invalid vec key: expected a key of type int, double given"
Unset failed: "Invalid vec key: expected a key of type int, stdClass given"
Unset failed: "Invalid vec key: expected a key of type int, array given"
Unset failed: "Invalid vec key: expected a key of type int, vec given"
Unset failed: "Invalid vec key: expected a key of type int, dict given"
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
Testing append....
vec(11) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
}
vec(20) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
  int(0)
  string(1) "a"
  float(1.23)
  bool(false)
  object(stdClass)#1 (0) {
  }
  array(3) {
    [0]=>
    int(300)
    [1]=>
    int(200)
    [2]=>
    int(100)
  }
  vec(0) {
  }
  vec(3) {
    int(1)
    int(2)
    int(3)
  }
  dict(3) {
    ["a"]=>
    int(1)
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
Testing set....
Set to 0 key value succeeded
Set to 3 key value succeeded
Set to 999999999 key value failed: "Out of bounds array access: invalid index 999999999"
Set to -1 key value failed: "Out of bounds array access: invalid index -1"
Set to "key1" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to "0" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to "3" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to "" key value failed: "Invalid vec key: expected a key of type int, string given"
Set to bool key value failed: "Invalid vec key: expected a key of type int, bool given"
Set to null key value failed: "Invalid vec key: expected a key of type int, null given"
Set to double key value failed: "Invalid vec key: expected a key of type int, double given"
Set to object key value failed: "Invalid vec key: expected a key of type int, stdClass given"
Set to array key value failed: "Invalid vec key: expected a key of type int, array given"
Set to vec key value failed: "Invalid vec key: expected a key of type int, vec given"
Set to dict key value failed: "Invalid vec key: expected a key of type int, dict given"
vec(11) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
}
vec(11) {
  string(11) "0 key value"
  string(1) "b"
  string(1) "c"
  string(11) "3 key value"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
}
Test set-op....
Set-Op to " + 0 key value" succeeded
Set-Op to " + 3 key value" succeeded
Set-Op to " + 999999999 key value" failed: "Out of bounds array access: invalid index 999999999"
Set-Op to " + -1 key value" failed: "Out of bounds array access: invalid index -1"
Set-Op to " + "key1" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + "0" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + "3" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + "" key value" failed: "Invalid vec key: expected a key of type int, string given"
Set-Op to " + bool key value" failed: "Invalid vec key: expected a key of type int, bool given"
Set-Op to " + null key value" failed: "Invalid vec key: expected a key of type int, null given"
Set-Op to " + double key value" failed: "Invalid vec key: expected a key of type int, double given"
Set-Op to " + object key value" failed: "Invalid vec key: expected a key of type int, stdClass given"
Set-Op to " + array key value" failed: "Invalid vec key: expected a key of type int, array given"
Set-Op to " + vec key value" failed: "Invalid vec key: expected a key of type int, vec given"
Set-Op to " + dict key value" failed: "Invalid vec key: expected a key of type int, dict given"
vec(11) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
}
vec(11) {
  string(15) "a + 0 key value"
  string(1) "b"
  string(1) "c"
  string(15) "d + 3 key value"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
}
Test unset....
Unset succeeded
vec(11) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
}
dict(10) {
  [1]=>
  string(1) "b"
  [2]=>
  string(1) "c"
  [3]=>
  string(1) "d"
  [4]=>
  string(1) "e"
  [5]=>
  string(1) "f"
  [6]=>
  string(1) "g"
  [7]=>
  string(1) "h"
  [8]=>
  string(1) "i"
  [9]=>
  string(1) "j"
  [10]=>
  string(1) "k"
}
Unset succeeded
vec(11) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
}
dict(10) {
  [0]=>
  string(1) "a"
  [1]=>
  string(1) "b"
  [2]=>
  string(1) "c"
  [4]=>
  string(1) "e"
  [5]=>
  string(1) "f"
  [6]=>
  string(1) "g"
  [7]=>
  string(1) "h"
  [8]=>
  string(1) "i"
  [9]=>
  string(1) "j"
  [10]=>
  string(1) "k"
}
Unset succeeded
Unset succeeded
Unset succeeded
Unset succeeded
Unset succeeded
Unset succeeded
Unset failed: "Invalid vec key: expected a key of type int, bool given"
Unset failed: "Invalid vec key: expected a key of type int, null given"
Unset failed: "Invalid vec key: expected a key of type int, double given"
Unset failed: "Invalid vec key: expected a key of type int, stdClass given"
Unset failed: "Invalid vec key: expected a key of type int, array given"
Unset failed: "Invalid vec key: expected a key of type int, vec given"
Unset failed: "Invalid vec key: expected a key of type int, dict given"
vec(11) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
}
vec(11) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
  string(1) "e"
  string(1) "f"
  string(1) "g"
  string(1) "h"
  string(1) "i"
  string(1) "j"
  string(1) "k"
}
